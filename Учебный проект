import tkinter as tk
from tkinter import filedialog as fd
import openpyxl
import re


region = 'Восток'
dolgota = []
shirota = []
based = []
grad, minq, seq = [], [], []
graduz = []
list_kord = []
dolg = []
shir = []


class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title = 'ConverterGPX'
        self.gui()

    def gui(self):
        label_koord = tk.Label(self, text='Выберите файл с координатами (Excel)')
        label_koord.pack()
        open_button = tk.Button(self, text='Загрузить и конвертировать', command=self.add_kord)
        open_button.pack()
        self.text = tk.Text(width=40, height=1)
        self.text.pack()
        label_kml = tk.Label(self, text='Выберите .kml файл')
        label_kml.pack()
        open_button2 = tk.Button(self, text='Загрузить и конвертировать', command=self.kml_gpx)
        open_button2.pack()

    def add_kord(self):
        filename = fd.askopenfilename(filetypes=[("EXCEL files", "*.xlsx")])
        if filename.endswith('xlsx') or filename.endswith('xls'):
            book = openpyxl.open(filename)
            sheet = book.active
            for row in range(1, sheet.max_row + 1):
                for column in range(0, sheet.max_column):
                    kord = str(sheet[row][column].value)
                    if kord.startswith('.', 2) or kord.startswith('.', 3):  # выбор колонки с десятичными градусами
                        t = ''.join(re.findall(r'[a-df-mo-zA-DF-MO-Zа-яА-Я-]', kord))  # кроме E, N
                        if t == '':
                            kord1 = re.sub(r'[NE⁰°]', r'', kord)
                            if region == 'Восток':
                                if float(kord1) > 70.0:
                                    shirota.append(kord1)
                                else:
                                    dolgota.append(kord1)
                        else:
                            continue
                    else:
                        if len(kord) > 9:  # минимальное количество символов для такой формы - 10
                            g = list(kord)
                            while g[-1] == ' ':  # удаление лишних пробелов
                                g.pop(-1)
                            kord_g = (''.join(g))
                            nkord = kord_g.replace('N', '')
                            ekord = nkord.replace('E', '')
                            t = ''.join(re.findall(r'[a-df-mo-zA-DF-MO-Zа-яА-Я]', ekord))
                            if ekord.startswith(' ', 2) and t == '':  # выбор формы записи координат в градусах, минутах и секундах, где вместо этих знаков стоит пробел
                                based = list(map(float, ekord.split(' ')))  # создание списка с элементами координат
                                while based:
                                    grad.append(based.pop(
                                        0))  # удаление элементов из "основного" списка и добавление в "целевой"
                                    minq.append(based.pop(0))
                                    seq.append(based.pop(0))
                                    gradus = grad[0] + round(minq[0] / 60, 6) + round(seq[0] / 3600, 6)  # приведение к десятичным градусам
                                    grad.pop(0)
                                    minq.pop(0)
                                    seq.pop(0)
                                    graduz.append(gradus)  # добавление в список десятичных градусов
                            if ekord.startswith('°', 2) or ekord.startswith('⁰', 2):  # приведение к описанной выше форме
                                kord_preo = re.sub(r'[ "“]', r'', ekord)
                                kord_preob = re.sub(r'[\'°⁰‘]', r' ', kord_preo)
                                z = kord_preob.replace(',', '.')
                                based = list(map(float, z.split(' ')))
                                while based:
                                    grad.append(based.pop(0))  # удаление элементов из "основного" списка и добавление в "целевой"
                                    minq.append(based.pop(0))
                                    seq.append(based.pop(0))
                                    gradus = grad[0] + round(minq[0] / 60, 6) + round(seq[0] / 3600, 6)  # приведение к десятичным градусам
                                    grad.pop(0)
                                    minq.pop(0)
                                    seq.pop(0)
                                    graduz.append(gradus)  # добавление в список десятичных градусов
                            for i in graduz:
                                if region == 'Восток':
                                    if i > 70.0:
                                        shirota.append(i)
                                    else:
                                        dolgota.append(i)

        my_file = open("trackfile.gpx", "w+")  # создание файла
        my_file.write('''<?xml version="1.0" encoding="utf-8"?><gpx version="1.1" creator="User">''')
        my_file.close()

        for i in range(len(shirota)):  # одинаковый параметр для обоих списков
            with open('trackfile.gpx', 'r+') as f:
                f.seek(0, 2)  # перемещение курсора в конец файла
                stroka = '<wpt lat="{}" lon="{}"><ele>0</ele><name>2</name><extensions><description>styleUrl: #m_ylw-pushpin</description><extrude>true</extrude></extensions></wpt>'.format(dolgota[i], shirota[i])
                f.write(stroka)

        with open('trackfile.gpx', 'r+') as f:
            f.seek(0, 2)
            ending = '</gpx>'
            f.write(ending)
            print('Готово')
            f.close()

    def kml_gpx(self):
        filename = fd.askopenfilename(filetypes=[("KML", "*.kml")])
        f = open(filename)
        if filename.endswith('kml'):
            line = f.read()
            if not '<LineString>' in line: #перевод точек
                det = re.findall(r'<coordinates>([^uu]+)</coordinates>', line)
                for i in det:
                    koord = re.findall(r'\b([^tt]+)\,\d', i)# удаление запятой и нуля
                    for z in koord:
                        koord_dolg = (''.join(re.findall(r'\b([^tt]+)\,\d', z)))  # выделение долготы
                        koord_shir = (''.join(re.findall(r'\,([^tt]+)\b', z)))  # выделение широты
                        dolg.append(koord_dolg)
                        shir.append(koord_shir)

        my_file = open("trackfile.gpx", "w+") #создание файла
        my_file.write('''<?xml version="1.0" encoding="utf-8"?><gpx version="1.1" creator="User">''')
        my_file.close()

        for i in range(len(dolg)):
            with open('trackfile.gpx', 'r+') as f:
                f.seek(0, 2)  # перемещение курсора в конец файла
                stroka = '<wpt lat="{}" lon="{}"><ele>0</ele><name>2</name><extensions><description>styleUrl: #m_ylw-pushpin</description><extrude>true</extrude></extensions></wpt>'.format(shir[i],dolg[i])
                f.write(stroka)


        with open('trackfile.gpx', 'r+') as f:
            f.seek(0, 2)
            ending = '</gpx>'
            f.write(ending)
            f.close()

if __name__ == '__main__':
    app = App()
    app.mainloop()
